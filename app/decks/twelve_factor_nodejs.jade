extends deck
mixin fig(imageUrl, authorName, authorUrl, licenseName, licenseUrl)
  figure
    img(src=imageUrl)
    figcaption Photo by
      != "&nbsp;"
      a(href=authorUrl)= authorName
      != "&nbsp;"
      a(href=licenseUrl)= "(" + licenseName + ")"

mixin slide(title)
  section
    h2= title
    block

mixin vslide(title)
  section
    section
      h2= title
    section
      block

block head
  title Twelve-Factor Apps in node.js
block slides
  +slide("Twelve-Factor Apps In node.js")
    h3 Peter Lyons
    hr
    h4 node.js Denver/Boulder/Fort Collins Meetup Group
    h5 May 19, 2015
  +slide("About Me")
    ul
      li Freelance Consultant
      li Full-stack web applications
      li node.js specialist
      li <a href="http://peterlyons.com">http://peterlyons.com</a>
  section
    +slide("What is Twelve-Factor?")
      +fig(
        "https://farm6.staticflickr.com/5613/15358706278_5a28094fdc_z_d.jpg",
        "InvernoDreaming",
        "https://www.flickr.com/photos/invernodreaming/",
        "CC BY-ND 2.0",
        "https://creativecommons.org/licenses/by-nd/2.0/")
    section
      ul
        li
          a(href="http://12factor.net") 12factor.net
        li A methodology for application lifecycle management
        li Based on Heroku's experience running 1000s of applications
        li Optimized for the cloud era: IaaS, SaaS, PaaS, scale out
        li Embodies opinions and best practices
        li Addresses "systemic problems"
        ul
          li not the only valid approach
          li not appropriate for all applications or organizations
  section
    +slide("Pre-PaaS Genisis of Twelve-Factor")
      +fig(
        "https://farm1.staticflickr.com/33/43131875_c0314382a2_z_d.jpg",
        "Phil Hollenback",
        "https://www.flickr.com/photos/phrenologist/",
        "CC BY-NC 2.0",
        "https://creativecommons.org/licenses/by-nc/2.0/")
    section
      h3 Deployment and Operations Before PaaS
      ul
        li sysadmins + ssh + bash
        li undocumented systems, tribal knowledge
        li manual repetition of procedures
        li error prone
        li easy to get into inconsistent state
        li scary reboots and rebuilds
        li precious golden servers
        li relatively tight coupling between the app and the underlying OS
        li high variance between dev/test/prod environments
        li high variance across companies/applications
  section
    +slide("Platform as a Service (PaaS)")
      +fig(
        "https://farm8.staticflickr.com/7474/15447707963_9f80204190_z_d.jpg",
        "Dennis Skley",
        "https://www.flickr.com/photos/dskley/",
        "CC BY-ND 2.0",
        "https://creativecommons.org/licenses/by-nd/2.0/")
      ul
        li takes off around 2008 (Google App Engine)
        li How does this effect application lifecycles?
    section
      ul
        li as PaaS product category blooms, industry needs to converge on automatable conventions
        li need standard workflow
        ul
          li get latest source
          li create build artifact
          li deploy to servers
          li restart services
  +slide("The Twelve Factors")
  section
    +slide("1. Codebase")
      +fig(
        "https://farm4.staticflickr.com/3050/2960047774_6e39a980dc_z_d.jpg",
        "Nick Quaranto",
        "https://www.flickr.com/photos/qrush/",
        "CC BY-SA 2.0",
        "https://creativecommons.org/licenses/by-sa/2.0/")
    section
      ul
        li Use git or $SCM
        li 1 to 1 mapping repo to app
        li have at least distinct prod and stage deploments
        ul
          li 1 repo containing multiple apps: nope
          li 1 app built from multiple repos: nope
        li node.js specifics
        ul
          li extract shared libraries to separate npm repos
          li use private git repo URLs or npm Enterprise
  section
    +slide("2. Dependencies")
      +fig(
        "https://pbs.twimg.com/media/B-HNKodCcAATQbS.jpg:large",
        "@funniesJS",
        "https://twitter.com/funniesJS",
        "CC BY-SA",
        "https://creativecommons.org/licenses/by-sa/2.0/")
    section
      ul
        li use npm package.json properly
        li Incorrect usage of npm accounts for 25-50% of issues Heroku sees with their node.js users
        li <code>npm config set save-exact=true</code>
        li <code>npm config set save=true</code>
        li <code>npm config set save-prefix=</code>
        li specify exact versions
        li use shrinkwrap if it ever starts working
        li never install with <code>npm -g</code> even if README say to
        li no system-level subprocesses
        ul
          li docker containers can help with this
          li This is highly dubious in the long term and espouses the "Inner Platform Effect" antipattern
          li the HTTP implementation in cURL is almost certainly far superior to the one in $YOUR_RUNTIME
  section
    +slide("3. Config")
      +fig(
        "https://farm5.staticflickr.com/4117/4764881882_de0ebb806a_z_d.jpg",
        "Ronan",
        "https://www.flickr.com/photos/ronancantwell/",
        "CC BY-NC-ND 2.0",
        "https://creativecommons.org/licenses/by-nc-nd/2.0/")
    section
      ul
        li app loads from OS environment variables
        li In systemd, use <code>EnvFile=</code>
        li don't group into named "environments"
        ul
          li production, development, staging, etc
          li
            a(href="https://www.npmjs.com/package/foreman") node-forman
            | can help transition away from this
        li npm module: <a href="https://www.npmjs.com/package/config3">config3</a>
  section
    +slide("4. Backing Services")
    section
      ul
        li treat as loosely coupled
        li connect via config params
        li switch between local and third-party providers with config changes but no code changes
        li sadly, most node db libraries do not make it easy to detect and gracefully handle non-working db connections
  section
    +slide("5. Build, Release, Run")
    section
      ul
        li https://github.com/heroku/heroku-buildpack-nodejs
        li basically "npm install --production" plus a dash of cacheing
        li build -> release could be just injecting a config.local.js file
        li a build creates an artifact that you could run later, perhaps years later, regardless of what happens on the Internet/www
        li Common antipattern: no build stage. Direct git clones/pulls on servers, builds on servers
    section
      ul
        li unnecessarily long downtime
        ul
          li "npm install" can take minutes
        li low reliability
        ul
          li if npm is down, your app stays down while it's down
        li low consistency
        ul
          li if new packages are published during a rolling deploy, server3 will end up with different versions than server1
        li high risk
        ul
          li untested code, failed downloads, failed install scripts, etc
        li espoused by ops-ignorant developers
        ul
          li put this practice in the same category as people who advise ssh-ing into prod servers and live-editing PHP files
  section
    +slide("6. Processes")
      +fig(
        "https://farm2.staticflickr.com/1096/1237061197_6c7039a681_z_d.jpg",
        "█ Slices of Light █▀ ▀ ▀",
        "https://www.flickr.com/photos/justaslice/",
        "CC BY-NC-ND 2.0",
        "https://creativecommons.org/licenses/by-nc-nd/2.0/")
    section
      h2 systemd service config file
      p Install to <code>/etc/systemd/system/mynodejsapp.service</code>
      code.block.
        [Unit]
        Description=My node.js App

        [Service]
        User=mynodejsapp
        Group=mynodejsapp
        WorkingDirectory=/opt/mynodejsapp
        EnvironmentFile=/etc/mynodejsapp/config
        Environment=NODE_ENV=production
        ExecStart=/usr/bin/node cluster.js
        Restart=always

        [Install]
        WantedBy=multi-user.target
    section
      h2 upstart config file (Debian/Ubuntu before 15.04)
      p Install to <code>/etc/init/mynodejsapp.conf</code>
      code.block.
        description "mynodejsapp"

        start on filesystem and started networking
        respawn
        console log
        chdir /opt/mynodejsapp
        setuid mynodejsapp
        setgid mynodejsapp
        env PATH=./node_modules/.bin:./node/bin:/usr/bin
        env NODE_ENV=production
        exec app/server.js
    section
      ul
        li Don't run as root
        li don't daemonize
        li Don't use a node-specific process supervisor
        li Use systemd or docker restart policies
        li local filesystem only as temporary, atomic operation working space as needed
  section
    +slide("7. Port Binding")
    section
      ul
        li straightforward
        li for web apps, FQDN can come from config
  section
    +slide("8. Concurrency")
      +fig(
        "https://farm1.staticflickr.com/233/447698435_fface3ece8_z_d.jpg?zz=1",
        "Nguyen-Anh Le",
        "https://www.flickr.com/photos/discopalace/",
        "CC BY-NC-ND 2.0",
        "https://creativecommons.org/licenses/by-nc-nd/2.0/")
    section
      ul
        li scale out with the shared-nothing process model
        li design app as distinct worker/process types
        li local state is an antipattern Heroku commonly sees
  section
    +slide("9. Disposability")
    section
      ul
        li robust queues
        li crash-only
  section
    +slide("10. Dev/prod parity")
    section
      ul
        li Don't use "lightweight" dev variants of backing services (sqlite3 etc)
        li It's a Vagrant/Docker party and everyone's invited
        li Dev: OSX + node.js + mynodejsapp, Docker + PostgreSQL
        li Test/Stage/Prod: Docker + node.js + mynodejsapp, Docker + PostgeSQL
  section
    +slide("11. Logs")
    section
      ul
        li bole, bunyan, winston
        li newline-delimited JSON to stdout
        li let the environment deal with rotation, centralization
        li systemd/journald handle it automatically
        li upstart "console log" handles it
        li svlogd from runit
        li multilog from daemontools
  section
    +slide("12. Admin Processes")
    section
      ul
        li stick them in a bin directory
  section
    +slide("Other Industry Trends")
    section
      ul
        li Immutable Infrastructure
        li pets -> cattle
        ul
          li http://www.slideshare.net/randybias/architectures-for-open-and-scalable-clouds
          li https://blog.engineyard.com/2014/pets-vs-cattle
  section
    +slide("Merits of Commercial Service")
    section
      ul
        li Some are worth their weight in gold
        li Some are long-term tax on lack of knowledge/experience
        li Commercial offerings are often superior to beginner/intermediate in-house approaches, but inferior to expert in-house systems
  section
    +slide("Sample App Tour of mjournal")
    section
      ol
        li Codebase: <a href="https://github.com/focusaurus/mjournal">code</a>
        li Dependencies: <a href="https://github.com/focusaurus/mjournal/blob/master/package.json">code</a>
        li Config: <a href="https://github.com/focusaurus/mjournal/blob/master/config.default.js">code</a>
        li Backing Services: <a href="https://github.com/focusaurus/mjournal/blob/master/config.default.js">code</a>
        li Build, Release, Run: <a href="https://github.com/focusaurus/mjournal/blob/master/bin/go#L168">code</a>
        li Processes: <a href="https://github.com/focusaurus/mjournal/blob/master/deploy/setup-docker.sh.mustache">code</a>
    section
      ol(start="7")
        li Port Binding: <a href="https://github.com/focusaurus/mjournal/blob/master/app/server.js#L34">code</a>
        li Concurrency: (Oops!) <a href="https://github.com/focusaurus/mjournal/blob/master/app/emails/scheduled.js">code</a>
        li Disposability: <a href="https://github.com/focusaurus/mjournal/blob/master/app/server.js#L42">code</a>
        li Dev/prod parity: <a href="https://github.com/focusaurus/mjournal/blob/master/deploy/setup-docker.sh.mustache">code</a>
        li Logs: <a href="https://github.com/focusaurus/mjournal/blob/master/app/log.js">code</a>
        li Admin Processes: <a href="https://github.com/focusaurus/mjournal/blob/master/app/emails/dailySummary.js#L51">code</a>
  +slide("Thank You")
    p 
      a(href="https://github.com/hunterloftis") Hunter Loftis
      |  (heroku node build pack maintainer) for review/feedback
  section
    +slide("References")
    section
      ul
        li: a(href="http://12factor.net") 12factor.net
        li: a(href="https://www.docker.com/") docker containerization
        li: a(href="https://github.com/heroku/heroku-docker") Heroku Docker Plugin
        li: a(href="https://www.npmjs.com/package/throng") throng module for cluster worker management
        li: a(href="https://www.npmjs.com/package/config3") config3
    section
      ul
        li: a(href="https://strongloop.com/strongblog/node-js-deploy-production-best-practice") StrongLoop node.js Deployment Best Practices
        li: a(href="http://michaeldehaan.net/post/118717252307/immutable-infrastructure-is-the-future") Immutable Infrastructure is the Future
        li: a(href="http://peterlyons.com/problog/2012/09/managing-per-project-interpreters-and-the-path") My Post About Avoiding npm -g
        li: a(href="/practices") Definition and purpose of a staging environment
        li: a(href="/problog/2010/02/environment-variables-considered-harmful") Environment Variables Considered Harmful
