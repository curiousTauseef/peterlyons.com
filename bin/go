#!/bin/bash
##### helper functions #####
autoinstall_wallah() {
  [[ -f wallah/bin/install_node ]] && return
  git submodule update --init
}

usage() {
  printf "Usage: $(basename $0) [" 1>&2
  while read line; do
    if echo "${line}" | egrep '^task::' >/dev/null; then
      task=$(echo "${line}" \
        | cut -d : -f 3 \
        | cut -d '(' -f 1
      )
      if [[ -z "${first}" ]]; then
        first="false"
      else
        printf "|"
      fi
      printf "${task}"
    fi
  done < <(cat "$0")
  printf "] [subcommand args...]\n" 1>&2
  cat <<EOF

Purpose of $(basename $0) script
--------------------

* entrypoint script for common commands
* Automatically installs development prerequisites
* Ensures the correct PATH environment variable
* commands are grouped by purpose/lifecycle and described in more detail below


Development Commands
--------------------

* express: start the express server
* test: run all the tests (mocha and karma)
* test_debug: run mocha tests with immediate breakpoint for debugging
* karma: start karma process to continuously watch and run tests
* validate: Run W3C HTML5 validator against the site HTML
* release: merge develop to master, increment package.json version, and tag
  * Usage: $(basename $0) release <patch|minor|major|specific_version>
Deployment Commands
-------------------

* clean: delete the build directory
* build: build a distribution archive for deployment
* errors: regenerate the static error HTML pages
* deploy: deploy code to a target system via ansible
  * Usage: $(basename $0) deploy <dist-file> <inventory-file>
  * will deploy the full stack to the server(s) listed in the ansible yaml inventory file argument
  * distribution archive files get built in the "build" directory
  * inventory files live in the deploy/hosts directory
* ansible: just a convenience wrapper around ./python/bin/ansible
  * used for running ad hoc ansible commands
  * installs ansible if needed
  * arguments are passed through to ./python/bin/ansible
* ansible-playbook: just a convenience wrapper around ./python/bin/ansible-playbook
  * used for running ad hoc ansible-playbook commands
  * installs ansible if needed
  * arguments are passed through to ./python/bin/ansible-playbook
* vagrant: just a convenience wrapper around vagrant with the correct environment
EOF
  exit 1
}

##### development task functions #####
task::express() {
  autoinstall_wallah
  ./wallah/bin/install_node
  node-dev --debug=9001 app/server.js
}

task::test() {
  autoinstall_wallah
  ./wallah/bin/install_node
  NODE_ENV=test mocha "$@"
  exec karma run karma/karma.conf.js
}

task::test_debug() {
  autoinstall_wallah
  ./wallah/bin/install_node
  NODE_ENV=test mocha --debug-brk=9004 "$@"
}

task::karma() {
  exec karma start karma/karma.conf.js
}

task::validate() {
  NODE_ENV=test mocha ./test/application/validation.js --validate
}

task::release() {
  echo "Performing a production peterlyons.com release"
  git checkout develop
  git pull origin develop
  task::test
  echo "ABOUT TO MERGE INTO MASTER. CTRL-C now to abort. ENTER to proceed."
  read DONTCARE
  git checkout master
  git merge develop
  npm version "$@"
  git push origin master --tags
  git checkout develop #Not good form to leave master checked out
  git merge master
  echo "Ready to go. Next steps are clean, build, and deploy."
}

##### deployment task functions #####
task::clean() {
  rm -rf ./build ./dist
}

task::build() {
  set -e
  #need the build system python here
  export PATH=/usr/bin:$PATH
  local git_ref="${1-HEAD}"
  local build_dir="build"
  local dist_dir="dist"
  local prefix="peterlyons.com-${git_ref}-$(date +%Y%m%d%H%M)"
  autoinstall_wallah
  ./wallah/bin/check_prerequisites git tar
  mkdir -p "${build_dir}" "${dist_dir}"
  #note we need to use "-C" with tar and not "--directory" due to bsdtar on osx
  git archive --format=tar --prefix="${prefix}/" "${git_ref}" | \
    #extract that archive into a temporary build directory
    tar -C "${build_dir}" --extract
  #We need to explicitly use /usr/bin/python here to work well
  #with our vagrant situation when ./python is an OSX version but
  #this script is running on a vagrant linux VM
  local node_version=$(/usr/bin/python ./wallah/bin/get_json_value \
    "${build_dir}/${prefix}/package.json" "engines.node")
  #install node
  ./wallah/bin/install_node "${build_dir}/${prefix}/node" "${node_version}"
  echo install npm packages
  (cd "${build_dir}/${prefix}" && ./node/bin/npm install --silent --production --parseable | grep -v '^/')
  #remove development-only files
  (cd "${build_dir}/${prefix}" && \
    rm -rf wallah doc deploy test karma Vagrantfile .gitignore .agignore .gitmodules)
  echo creating archive
  local dist_path="${dist_dir}/${prefix}.tar.xz"
  tar -C "${build_dir}" --create --xz --file "${dist_path}" .
  ls -lh "${dist_path}"
  echo "To deploy to stage, run:"
  printf "\t./bin/go deploy ${dist_path} deploy/hosts/vagrant_stage.yml\n"
}

task::errors() {
  autoinstall_wallah
  ./wallah/bin/check_prerequisites curl
  local devurl="http://localhost:9000"
  local static="../static"
  echo "Generating HTML for static error pages from ${devurl}..."
  for uri in error404 error500; do
    local url="${devurl}/${uri}"
    printf "${uri}, "
    local exit_code=0
    curl --silent "${url}" --output \
        "${static}/${uri}.html" || exit_code=$?
    if [ ${exit_code} -ne 0 ]; then
        echo "FAILED to retrieve ${url}"
        exit ${exit_code}
    fi
  done
}

task::deploy() {
  autoinstall_wallah
  ./wallah/bin/install_pip_package ansible
  local dist_path="$1"
  local dist_name=$(basename "${dist_path}")
  dist_name=$(echo "${dist_name}" | sed 's/\.tar\...//')
  local inventory="$2"
  ANSIBLE_HOST_KEY_CHECKING=False exec ansible-playbook \
    -i "${inventory}" \
    --ask-sudo-pass \
    --extra-vars "'dist=${dist_path}'" \
    --extra-vars "'dist_name=${dist_name}'" \
    ./deploy/playbook_express.yml
}

task::vagrant() {
  autoinstall_wallah
  ./wallah/bin/install_pip_package ansible
  exec vagrant "$@"
}

task::ansible-playbook() {
  autoinstall_wallah
  ./wallah/bin/install_pip_package ansible
  ANSIBLE_HOST_KEY_CHECKING=False exec ansible-playbook "$@"
}

##### main code #####
main() {
  cd "$(dirname $0)/.."
  PATH="${PWD}/python/bin"
  PATH="${PATH}:${PWD}/node/bin"
  PATH="${PATH}:${PWD}/node_modules/.bin"
  #Need the basics like dirname et al
  PATH="${PATH}:/usr/bin:/bin"
  export PATH
  task_name="$1"
  if type "task::${task_name}" &>/dev/null; then
    shift
    eval "task::${task_name}" "$@"
  else
    usage "$@"
  fi
}

main "$@"
