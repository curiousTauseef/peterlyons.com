#!/bin/bash
##### helper functions #####
autoinstall_wallah() {
  [[ -f wallah/bin/install_node ]] && return
  git submodule update --init
}

# autoinstall_ansible() {
#   autoinstall_python
#   if [[ ! -x ansible/bin/ansible ]]; then
#     git submodule update --init
#   fi
#   [[ -e python/lib/python2.7/site-packages/paramiko ]] && return
#   ./python/bin/pip install -r requirements-ansible.txt
# }

usage() {
  printf "Usage: $(basename $0) [" 1>&2
  while read line; do
    if echo "${line}" | egrep '^task::' >/dev/null; then
      task=$(echo "${line}" \
        | cut -d : -f 3 \
        | cut -d '(' -f 1
      )
      if [[ -z "${first}" ]]; then
        first="false"
      else
        printf "|"
      fi
      printf "${task}"
    fi
  done < <(cat "$0")
  printf "]\n" 1>&2
  exit 1
}

##### task functions #####
task::dist() {
  set -e
  #need the build system python here
  export PATH=/usr/bin:$PATH
  local git_ref="${1-HEAD}"
  local build_dir="build"
  local dist_dir="dist"
  local prefix="peterlyons.com-${git_ref}"
  #OS X support
  # local TAR=tar
  # if which gnutar &> /dev/null; then
  #   TAR=gnutar
  # fi
  autoinstall_wallah
  ./wallah/bin/check_prerequisites git tar
  mkdir -p "${build_dir}" "${dist_dir}"
  echo doing git archive
  #note we need to use "-C" with tar and not "--directory" due to bsdtar on osx
  git archive --format=tar --prefix="${prefix}/" "${git_ref}" | \
    #extract that archive into a temporary build directory
    tar -C "${build_dir}" --extract
  #remove development-only files
  #install node
  #We need to explicitly use /usr/bin/python here to work well
  #with our vagrant situation when ./python is an OSX version but
  #this script is running on a vagrant linux VM
  local node_version=$(./wallah/bin/get_json_value \
    "${build_dir}/${prefix}/package.json" "engines.node")
  ./wallah/bin/install_node "${build_dir}/${prefix}/node" "${node_version}"
  echo install npm packages
  (cd "${build_dir}/${prefix}" && ./node/bin/npm --production install)
  (cd "${build_dir}/${prefix}" && \
    rm -rf ansible wallah doc deploy test Vagrantfile .gitignore .agignore .gitmodules)
  echo creating archive
  tar -C "${build_dir}" --create --bzip2 --file "${dist_dir}/${prefix}.tar.bz2" .
}

task::test() {
  autoinstall_wallah
  ./wallah/bin/install_node
  set -e
  mocha test/unit/*.coffee
  mocha test/application/*.coffee
}

task::express() {
  autoinstall_wallah
  ./wallah/bin/install_node
  node-dev --debug=9001 app/server.coffee
}

task::inspector() {
  autoinstall_wallah
  ./wallah/bin/install_node
  echo "http://localhost:9002/debug?port=9001"
  ./node_modules/.bin/node-inspector --web-port=9002
}

task::errors() {
  autoinstall_wallah
  ./wallah/bin/check_prerequisites curl
  local devurl="http://localhost:9000"
  local static="../static"
  echo "Generating HTML for static error pages from ${devurl}..."
  for uri in error404 error500; do
    local url="${devurl}/${uri}"
    printf "${uri}, "
    local exit_code=0
    curl --silent "${url}" --output \
        "${static}/${uri}.html" || exit_code=$?
    if [ ${exit_code} -ne 0 ]; then
        echo "FAILED to retrieve ${url}"
        exit ${exit_code}
    fi
  done
}

task::deploy() {
  autoinstall_wallah
  ./wallah/bin/install_pip_package ansible
  local DIST_PATH="${1}"
  local DIST_FILE=$(basename "${DIST_PATH}")
  local prefix=$(echo ${DIST_FILE} | sed 's/\.tar\.bz2//')
  shift
  local PROJECT_PATH="projects/peter_lyons_web_site"
  echo deploying code "${DIST_PATH}" to $@
  for HOST in $@
  do
    scp "${DIST_PATH}" "${HOST}":/tmp
    ssh "${HOST}" <<EOF
      install --directory "${PROJECT_PATH}"
      tar --extract --bzip2 --directory "${PROJECT_PATH}" --file "/tmp/${DIST_FILE}"
      cd "${PROJECT_PATH}/${prefix}"
EOF
    ssh -t "${HOST}" sudo "${PROJECT_PATH}/${prefix}/bin/post_extract.sh"
  done
}

task::clean() {
  rm -rf ./build ./dist
}

##### main code #####
main() {
  cd $(dirname "$0")/..
  PATH="${PWD}/python/bin"
  PATH="${PATH}:${PWD}/node/bin"
  PATH="${PATH}:${PWD}/node_modules/.bin"
  #Need the basics like dirname et al
  PATH="${PATH}:/usr/bin:/bin"
  export PATH

  case "$1" in
    ansible|ansible-playbook)
      autoinstall_ansible
      ANSIBLE_COMMAND="$1"
      shift
      exec "./bin/${ANSIBLE_COMMAND}" "$@"
    ;;
    *)
      task_name="$1"
      if type "task::${task_name}" &>/dev/null; then
        shift
        eval "task::${task_name}" "$@"
      else
        usage "$@"
      fi
    ;;
  esac
}

main "$@"
